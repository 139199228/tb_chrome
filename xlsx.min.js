// SheetJS库 - 轻量版本用于Excel导出
// 这是一个简化版本，只包含导出功能
(function() {
    'use strict';
    
    // 简化的XLSX导出功能
    window.XLSX = {
        utils: {
            book_new: function() {
                return { SheetNames: [], Sheets: {} };
            },
            
            aoa_to_sheet: function(data) {
                const ws = {};
                const range = { s: { c: 0, r: 0 }, e: { c: 0, r: 0 } };
                
                for (let R = 0; R < data.length; ++R) {
                    for (let C = 0; C < data[R].length; ++C) {
                        if (range.s.r > R) range.s.r = R;
                        if (range.s.c > C) range.s.c = C;
                        if (range.e.r < R) range.e.r = R;
                        if (range.e.c < C) range.e.c = C;
                        
                        const cell_ref = this.encode_cell({ c: C, r: R });
                        ws[cell_ref] = { t: 's', v: data[R][C] };
                    }
                }
                
                if (range.s.c < 10000000) ws['!ref'] = this.encode_range(range);
                return ws;
            },
            
            book_append_sheet: function(wb, ws, name) {
                wb.SheetNames.push(name);
                wb.Sheets[name] = ws;
            },
            
            encode_cell: function(cell) {
                return this.encode_col(cell.c) + this.encode_row(cell.r);
            },
            
            encode_col: function(col) {
                let s = '';
                for (++col; col; col = Math.floor((col - 1) / 26)) {
                    s = String.fromCharCode(((col - 1) % 26) + 65) + s;
                }
                return s;
            },
            
            encode_row: function(row) {
                return '' + (row + 1);
            },
            
            encode_range: function(range) {
                return this.encode_cell(range.s) + ':' + this.encode_cell(range.e);
            }
        },
        
        write: function(workbook, options) {
            const ws = workbook.Sheets[workbook.SheetNames[0]];
            let csv = '';
            
            if (!ws['!ref']) return '';
            
            const range = this.utils.decode_range(ws['!ref']);
            
            for (let R = range.s.r; R <= range.e.r; ++R) {
                let row = '';
                for (let C = range.s.c; C <= range.e.c; ++C) {
                    const cell_address = this.utils.encode_cell({ c: C, r: R });
                    const cell = ws[cell_address];
                    let cell_value = '';
                    
                    if (cell) {
                        cell_value = cell.v || '';
                    }
                    
                    if (C > range.s.c) row += ',';
                    row += '"' + String(cell_value).replace(/"/g, '""') + '"';
                }
                if (R > range.s.r) csv += '\n';
                csv += row;
            }
            
            return '\ufeff' + csv; // 添加BOM以支持中文
        }
    };
    
    // 添加decode_range方法
    window.XLSX.utils.decode_range = function(range) {
        const parts = range.split(':');
        return {
            s: this.decode_cell(parts[0]),
            e: this.decode_cell(parts[1] || parts[0])
        };
    };
    
    // 添加decode_cell方法
    window.XLSX.utils.decode_cell = function(cell) {
        const match = cell.match(/([A-Z]+)(\d+)/);
        return {
            c: this.decode_col(match[1]),
            r: parseInt(match[2]) - 1
        };
    };
    
    // 添加decode_col方法
    window.XLSX.utils.decode_col = function(col) {
        let result = 0;
        for (let i = 0; i < col.length; i++) {
            result = result * 26 + (col.charCodeAt(i) - 64);
        }
        return result - 1;
    };
})();